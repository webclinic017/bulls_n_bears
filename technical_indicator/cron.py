import os
import pytz
import requests
import datetime

from bulls_n_bears import settings

from twilio.rest import Client
from django_cron import CronJobBase, Schedule
from technical_indicator.models import CompanyWiseChartData
from technical_indicator.utils import proxylist, five_minutes_candle_data, get_new_insider_trades

utc = pytz.UTC


class InsiderTrades(CronJobBase):
    RUN_EVERY_MINS = 5
    schedule = Schedule(run_every_mins=RUN_EVERY_MINS)
    code = "technical_indicator.cron.InsiderTrades"

    def do(self):
        # import pdb;pdb.set_trace()
        try:
            s = requests.session()
            insider_json = get_new_insider_trades(s)
            print(insider_json)
        except Exception as e:
            print(e)
        # requests.get('http://127.0.0.1:8001/market_data/get_new_insider_data', params=insider_json)


class FallingPriceRisingVolumeCompany(CronJobBase):
    RUN_EVERY_MINS = 5
    schedule = Schedule(run_every_mins=RUN_EVERY_MINS)
    code = "technical_indicator.cron.FallingPriceRisingVolumeCompany"

    def do(self):
        print("Start :", datetime.datetime.now().time())
        proxy = proxylist()
        date = datetime.date.today()

        s = requests.session()

        symbols_list = []
        # time.sleep(30)
        five_minutes_candle_data(s, proxy)
        print("Stop :", datetime.datetime.now().time())
        '''
        query_set = CompanyWiseChartData.objects.all()
        if query_set:
            for qs in query_set:
                if len(qs.last_price['lastprice']) >= 3:
                    first = qs.value['value'][-4]
                    sec = qs.value['value'][-3]
                    thr = qs.value['value'][-2]
                    four = qs.value['value'][-1]
                    if (four - thr) > (thr - sec) and (thr - sec) > (sec - first):
                        print('volume found in :', qs.symbol)
                        if qs.last_price['lastprice'][-3] > qs.last_price['lastprice'][-2] and \
                                qs.last_price['lastprice'][-2] > qs.last_price['lastprice'][-1]:
                            print('company found :', qs.symbol)
        return Response({'status': True})
        '''


































































































































































































































































































































































































































































































































































































































































































































































































































































































































